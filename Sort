# 插入排序
# def insertion_sort(a_list):
#   for index in range(1, len(a_list)):
#       # 总序列，假定第一个是已经排好序的第一个子序列，遍历除它外的序列的每个元素，
#     current_value = a_list[index]
#       # 先将它赋给current_value.就是要插入的数
#     position = index
#     while position > 0 and a_list[position - 1] > current_value:
#         # 子序列循环，只要有比这个数大的数，就要有后移
#        a_list[position] = a_list[position - 1]
#        position = position - 1
#     a_list[position] = current_value
# a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]
# insertion_sort(a_list)
# print(a_list)

# def shell_sort(a_list):
#     sublist_count = len(a_list) // 2
#     while sublist_count > 0:
#         for start_position in range(sublist_count):
#             gap_insertion_sort(a_list, start_position, sublist_count)
#         print("After increments of size", sublist_count, "The list is", a_list)
#         sublist_count = sublist_count // 2
#
# def gap_insertion_sort(a_list, start, gap):
#     for i in range(start + gap, len(a_list), gap):
#         current_value = a_list[i]
#         position = i
#         while position >= gap and a_list[position - gap] > current_value:
#             a_list[position] = a_list[position - gap]
#             position = position - gap
#             a_list[position] = current_value
# a_list = [54, 26, 93, 17, 77, 31, 44, 55, 20]
# shell_sort(a_list)
# print(a_list)


# Python3 program for implementation of Shell Sort

def shellSort(arr):
    gap = len(arr) // 2  # initialize the gap

    while gap > 0:
        i = 0
        j = gap

        # check the array in from left to right
        # till the last possible index of j
        while j < len(arr):

            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]

            i += 1
            j += 1

            # now, we look back from ith index to the left
            # we swap the values which are not in the right order.
            # 确保左边是排对的：（右边正在排）。紧连着的两个是排对的，那全部下来肯定也是排对的：a和b比，比完之后间距大于1时，第二轮是c和d比；
            # 也可能是e和f比，要保证该增量下是排好序的，就要检查前面的：
            k = i
            while k - gap > -1:

                if arr[k - gap] > arr[k]:
                    arr[k - gap], arr[k] = arr[k], arr[k - gap]
                k -= 1

        gap //= 2


# driver to check the code
arr2 = [12, 34, 54, 2, 3]
print("input array:", arr2)

shellSort(arr2)
print("sorted array", arr2)





# # Python program for implementation of MergeSort
# def mergeSort(arr):
# 	if len(arr) > 1:
#
# 		# Finding the mid of the array
# 		mid = len(arr)//2
#
# 		# Dividing the array elements
# 		L = arr[:mid]
#
# 		# into 2 halves
# 		R = arr[mid:]
#
# 		# Sorting the first half
# 		mergeSort(L)
#
# 		# Sorting the second half
# 		mergeSort(R)
#
# 		i = j = k = 0
#
# 		# Copy data to temp arrays L[] and R[]
# 		while i < len(L) and j < len(R):
# 			if L[i] < R[j]:
# 				arr[k] = L[i]
# 				i += 1
# 			else:
# 				arr[k] = R[j]
# 				j += 1
# 			k += 1
#
# 		# Checking if any element was left
# 		while i < len(L):
# 			arr[k] = L[i]
# 			i += 1
# 			k += 1
#
# 		while j < len(R):
# 			arr[k] = R[j]
# 			j += 1
# 			k += 1
#
# # Code to print the list
#
#
# def printList(arr):
# 	for i in range(len(arr)):
# 		print(arr[i], end=" ")
# 	print()
#
#
# # Driver Code
# if __name__ == '__main__':
# 	arr = [12, 11, 13, 5, 6, 7]
# 	print("Given array is", end="\n")
# 	printList(arr)
# 	mergeSort(arr)
# 	print("Sorted array is: ", end="\n")
# 	printList(arr)
#


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 1 or not nums: # 首先，我们总得考虑特殊得情况
            return []
        res = [] # 这里我们先设定一个res来存储之后的答案
        nums.sort() # 有一个道理是如果你有一个序列数但不知道怎么处理，就先对它进行排序
        target = 0 # 之和是0
        for i in range(len(nums)-2): # 三数之和只用到倒数第三就可以，剩下的可以用指针去指代
            right = len(nums)-1
            left = i+1
            while left < right:
                total = nums[i] + nums[left] + nums[right]
                if total == target:
                    if [nums[i],nums[left],nums[right]] not in res: # 先确保算出来的不是已经存在的答案
                        res.append(nums[i],nums[left],nums[right])
                    left += 1
                    right -= 1
                elif total <0:
                    left += 1
                elif total > 0:
                    right -= 1
        return res
